// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: farmer/v1/farmer.proto

package pbgen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FarmerService_FarmerProfile_FullMethodName       = "/farmer.v1.FarmerService/FarmerProfile"
	FarmerService_UpdateFarmerProfile_FullMethodName = "/farmer.v1.FarmerService/UpdateFarmerProfile"
)

// FarmerServiceClient is the client API for FarmerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FarmerServiceClient interface {
	FarmerProfile(ctx context.Context, in *FarmerProfileRequest, opts ...grpc.CallOption) (*FarmerProfileResponse, error)
	UpdateFarmerProfile(ctx context.Context, in *UpdateFarmerProfileRequest, opts ...grpc.CallOption) (*UpdateFarmerProfileResponse, error)
}

type farmerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFarmerServiceClient(cc grpc.ClientConnInterface) FarmerServiceClient {
	return &farmerServiceClient{cc}
}

func (c *farmerServiceClient) FarmerProfile(ctx context.Context, in *FarmerProfileRequest, opts ...grpc.CallOption) (*FarmerProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FarmerProfileResponse)
	err := c.cc.Invoke(ctx, FarmerService_FarmerProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmerServiceClient) UpdateFarmerProfile(ctx context.Context, in *UpdateFarmerProfileRequest, opts ...grpc.CallOption) (*UpdateFarmerProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFarmerProfileResponse)
	err := c.cc.Invoke(ctx, FarmerService_UpdateFarmerProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FarmerServiceServer is the server API for FarmerService service.
// All implementations must embed UnimplementedFarmerServiceServer
// for forward compatibility.
type FarmerServiceServer interface {
	FarmerProfile(context.Context, *FarmerProfileRequest) (*FarmerProfileResponse, error)
	UpdateFarmerProfile(context.Context, *UpdateFarmerProfileRequest) (*UpdateFarmerProfileResponse, error)
	mustEmbedUnimplementedFarmerServiceServer()
}

// UnimplementedFarmerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFarmerServiceServer struct{}

func (UnimplementedFarmerServiceServer) FarmerProfile(context.Context, *FarmerProfileRequest) (*FarmerProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FarmerProfile not implemented")
}
func (UnimplementedFarmerServiceServer) UpdateFarmerProfile(context.Context, *UpdateFarmerProfileRequest) (*UpdateFarmerProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFarmerProfile not implemented")
}
func (UnimplementedFarmerServiceServer) mustEmbedUnimplementedFarmerServiceServer() {}
func (UnimplementedFarmerServiceServer) testEmbeddedByValue()                       {}

// UnsafeFarmerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FarmerServiceServer will
// result in compilation errors.
type UnsafeFarmerServiceServer interface {
	mustEmbedUnimplementedFarmerServiceServer()
}

func RegisterFarmerServiceServer(s grpc.ServiceRegistrar, srv FarmerServiceServer) {
	// If the following call pancis, it indicates UnimplementedFarmerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FarmerService_ServiceDesc, srv)
}

func _FarmerService_FarmerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FarmerProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmerServiceServer).FarmerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FarmerService_FarmerProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmerServiceServer).FarmerProfile(ctx, req.(*FarmerProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmerService_UpdateFarmerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFarmerProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmerServiceServer).UpdateFarmerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FarmerService_UpdateFarmerProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmerServiceServer).UpdateFarmerProfile(ctx, req.(*UpdateFarmerProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FarmerService_ServiceDesc is the grpc.ServiceDesc for FarmerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FarmerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "farmer.v1.FarmerService",
	HandlerType: (*FarmerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FarmerProfile",
			Handler:    _FarmerService_FarmerProfile_Handler,
		},
		{
			MethodName: "UpdateFarmerProfile",
			Handler:    _FarmerService_UpdateFarmerProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "farmer/v1/farmer.proto",
}
