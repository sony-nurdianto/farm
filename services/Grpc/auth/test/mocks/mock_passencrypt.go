// Code generated by MockGen. DO NOT EDIT.
// Source: password_hash.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPassEncrypt is a mock of PassEncrypt interface.
type MockPassEncrypt struct {
	ctrl     *gomock.Controller
	recorder *MockPassEncryptMockRecorder
}

// MockPassEncryptMockRecorder is the mock recorder for MockPassEncrypt.
type MockPassEncryptMockRecorder struct {
	mock *MockPassEncrypt
}

// NewMockPassEncrypt creates a new mock instance.
func NewMockPassEncrypt(ctrl *gomock.Controller) *MockPassEncrypt {
	mock := &MockPassEncrypt{ctrl: ctrl}
	mock.recorder = &MockPassEncryptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPassEncrypt) EXPECT() *MockPassEncryptMockRecorder {
	return m.recorder
}

// HashPassword mocks base method.
func (m *MockPassEncrypt) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockPassEncryptMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockPassEncrypt)(nil).HashPassword), password)
}

// VerifyPassword mocks base method.
func (m *MockPassEncrypt) VerifyPassword(password, passwordHash string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPassword", password, passwordHash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyPassword indicates an expected call of VerifyPassword.
func (mr *MockPassEncryptMockRecorder) VerifyPassword(password, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPassword", reflect.TypeOf((*MockPassEncrypt)(nil).VerifyPassword), password, passwordHash)
}
