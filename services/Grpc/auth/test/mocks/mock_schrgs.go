// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sony-nurdianto/farm/shared_lib/Go/kafkaev/schrgs (interfaces: SchemaRegisteryClient,SchemaRegisteryInstance)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	schemaregistry "github.com/confluentinc/confluent-kafka-go/v2/schemaregistry"
	gomock "github.com/golang/mock/gomock"
)

// MockSchemaRegisteryClient is a mock of SchemaRegisteryClient interface.
type MockSchemaRegisteryClient struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaRegisteryClientMockRecorder
}

// MockSchemaRegisteryClientMockRecorder is the mock recorder for MockSchemaRegisteryClient.
type MockSchemaRegisteryClientMockRecorder struct {
	mock *MockSchemaRegisteryClient
}

// NewMockSchemaRegisteryClient creates a new mock instance.
func NewMockSchemaRegisteryClient(ctrl *gomock.Controller) *MockSchemaRegisteryClient {
	mock := &MockSchemaRegisteryClient{ctrl: ctrl}
	mock.recorder = &MockSchemaRegisteryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemaRegisteryClient) EXPECT() *MockSchemaRegisteryClientMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockSchemaRegisteryClient) Client() schemaregistry.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(schemaregistry.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockSchemaRegisteryClientMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockSchemaRegisteryClient)(nil).Client))
}

// GetLatestSchemaMetadata mocks base method.
func (m *MockSchemaRegisteryClient) GetLatestSchemaMetadata(arg0 string) (schemaregistry.SchemaMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSchemaMetadata", arg0)
	ret0, _ := ret[0].(schemaregistry.SchemaMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSchemaMetadata indicates an expected call of GetLatestSchemaMetadata.
func (mr *MockSchemaRegisteryClientMockRecorder) GetLatestSchemaMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSchemaMetadata", reflect.TypeOf((*MockSchemaRegisteryClient)(nil).GetLatestSchemaMetadata), arg0)
}

// Register mocks base method.
func (m *MockSchemaRegisteryClient) Register(arg0 string, arg1 schemaregistry.SchemaInfo, arg2 bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockSchemaRegisteryClientMockRecorder) Register(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockSchemaRegisteryClient)(nil).Register), arg0, arg1, arg2)
}

// MockSchemaRegisteryInstance is a mock of SchemaRegisteryInstance interface.
type MockSchemaRegisteryInstance struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaRegisteryInstanceMockRecorder
}

// MockSchemaRegisteryInstanceMockRecorder is the mock recorder for MockSchemaRegisteryInstance.
type MockSchemaRegisteryInstanceMockRecorder struct {
	mock *MockSchemaRegisteryInstance
}

// NewMockSchemaRegisteryInstance creates a new mock instance.
func NewMockSchemaRegisteryInstance(ctrl *gomock.Controller) *MockSchemaRegisteryInstance {
	mock := &MockSchemaRegisteryInstance{ctrl: ctrl}
	mock.recorder = &MockSchemaRegisteryInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemaRegisteryInstance) EXPECT() *MockSchemaRegisteryInstanceMockRecorder {
	return m.recorder
}

// NewClient mocks base method.
func (m *MockSchemaRegisteryInstance) NewClient(arg0 *schemaregistry.Config) (schemaregistry.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClient", arg0)
	ret0, _ := ret[0].(schemaregistry.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClient indicates an expected call of NewClient.
func (mr *MockSchemaRegisteryInstanceMockRecorder) NewClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockSchemaRegisteryInstance)(nil).NewClient), arg0)
}
