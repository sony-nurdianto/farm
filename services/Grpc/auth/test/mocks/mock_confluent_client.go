// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/confluentinc/confluent-kafka-go/v2/schemaregistry (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	schemaregistry "github.com/confluentinc/confluent-kafka-go/v2/schemaregistry"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ClearCaches mocks base method.
func (m *MockClient) ClearCaches() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearCaches")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearCaches indicates an expected call of ClearCaches.
func (mr *MockClientMockRecorder) ClearCaches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCaches", reflect.TypeOf((*MockClient)(nil).ClearCaches))
}

// ClearLatestCaches mocks base method.
func (m *MockClient) ClearLatestCaches() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearLatestCaches")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearLatestCaches indicates an expected call of ClearLatestCaches.
func (mr *MockClientMockRecorder) ClearLatestCaches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearLatestCaches", reflect.TypeOf((*MockClient)(nil).ClearLatestCaches))
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Config mocks base method.
func (m *MockClient) Config() *schemaregistry.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*schemaregistry.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockClientMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockClient)(nil).Config))
}

// DeleteSubject mocks base method.
func (m *MockClient) DeleteSubject(arg0 string, arg1 bool) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubject", arg0, arg1)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubject indicates an expected call of DeleteSubject.
func (mr *MockClientMockRecorder) DeleteSubject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubject", reflect.TypeOf((*MockClient)(nil).DeleteSubject), arg0, arg1)
}

// DeleteSubjectVersion mocks base method.
func (m *MockClient) DeleteSubjectVersion(arg0 string, arg1 int, arg2 bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubjectVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubjectVersion indicates an expected call of DeleteSubjectVersion.
func (mr *MockClientMockRecorder) DeleteSubjectVersion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubjectVersion", reflect.TypeOf((*MockClient)(nil).DeleteSubjectVersion), arg0, arg1, arg2)
}

// GetAllContexts mocks base method.
func (m *MockClient) GetAllContexts() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllContexts")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllContexts indicates an expected call of GetAllContexts.
func (mr *MockClientMockRecorder) GetAllContexts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllContexts", reflect.TypeOf((*MockClient)(nil).GetAllContexts))
}

// GetAllSubjects mocks base method.
func (m *MockClient) GetAllSubjects() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubjects")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubjects indicates an expected call of GetAllSubjects.
func (mr *MockClientMockRecorder) GetAllSubjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubjects", reflect.TypeOf((*MockClient)(nil).GetAllSubjects))
}

// GetAllVersions mocks base method.
func (m *MockClient) GetAllVersions(arg0 string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVersions", arg0)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVersions indicates an expected call of GetAllVersions.
func (mr *MockClientMockRecorder) GetAllVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVersions", reflect.TypeOf((*MockClient)(nil).GetAllVersions), arg0)
}

// GetByGUID mocks base method.
func (m *MockClient) GetByGUID(arg0 string) (schemaregistry.SchemaInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGUID", arg0)
	ret0, _ := ret[0].(schemaregistry.SchemaInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGUID indicates an expected call of GetByGUID.
func (mr *MockClientMockRecorder) GetByGUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGUID", reflect.TypeOf((*MockClient)(nil).GetByGUID), arg0)
}

// GetBySubjectAndID mocks base method.
func (m *MockClient) GetBySubjectAndID(arg0 string, arg1 int) (schemaregistry.SchemaInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySubjectAndID", arg0, arg1)
	ret0, _ := ret[0].(schemaregistry.SchemaInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySubjectAndID indicates an expected call of GetBySubjectAndID.
func (mr *MockClientMockRecorder) GetBySubjectAndID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySubjectAndID", reflect.TypeOf((*MockClient)(nil).GetBySubjectAndID), arg0, arg1)
}

// GetCompatibility mocks base method.
func (m *MockClient) GetCompatibility(arg0 string) (schemaregistry.Compatibility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompatibility", arg0)
	ret0, _ := ret[0].(schemaregistry.Compatibility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompatibility indicates an expected call of GetCompatibility.
func (mr *MockClientMockRecorder) GetCompatibility(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompatibility", reflect.TypeOf((*MockClient)(nil).GetCompatibility), arg0)
}

// GetConfig mocks base method.
func (m *MockClient) GetConfig(arg0 string, arg1 bool) (schemaregistry.ServerConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", arg0, arg1)
	ret0, _ := ret[0].(schemaregistry.ServerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockClientMockRecorder) GetConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockClient)(nil).GetConfig), arg0, arg1)
}

// GetDefaultCompatibility mocks base method.
func (m *MockClient) GetDefaultCompatibility() (schemaregistry.Compatibility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultCompatibility")
	ret0, _ := ret[0].(schemaregistry.Compatibility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultCompatibility indicates an expected call of GetDefaultCompatibility.
func (mr *MockClientMockRecorder) GetDefaultCompatibility() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultCompatibility", reflect.TypeOf((*MockClient)(nil).GetDefaultCompatibility))
}

// GetDefaultConfig mocks base method.
func (m *MockClient) GetDefaultConfig() (schemaregistry.ServerConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultConfig")
	ret0, _ := ret[0].(schemaregistry.ServerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultConfig indicates an expected call of GetDefaultConfig.
func (mr *MockClientMockRecorder) GetDefaultConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultConfig", reflect.TypeOf((*MockClient)(nil).GetDefaultConfig))
}

// GetID mocks base method.
func (m *MockClient) GetID(arg0 string, arg1 schemaregistry.SchemaInfo, arg2 bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetID indicates an expected call of GetID.
func (mr *MockClientMockRecorder) GetID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockClient)(nil).GetID), arg0, arg1, arg2)
}

// GetIDFullResponse mocks base method.
func (m *MockClient) GetIDFullResponse(arg0 string, arg1 schemaregistry.SchemaInfo, arg2 bool) (schemaregistry.SchemaMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDFullResponse", arg0, arg1, arg2)
	ret0, _ := ret[0].(schemaregistry.SchemaMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDFullResponse indicates an expected call of GetIDFullResponse.
func (mr *MockClientMockRecorder) GetIDFullResponse(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDFullResponse", reflect.TypeOf((*MockClient)(nil).GetIDFullResponse), arg0, arg1, arg2)
}

// GetLatestSchemaMetadata mocks base method.
func (m *MockClient) GetLatestSchemaMetadata(arg0 string) (schemaregistry.SchemaMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSchemaMetadata", arg0)
	ret0, _ := ret[0].(schemaregistry.SchemaMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSchemaMetadata indicates an expected call of GetLatestSchemaMetadata.
func (mr *MockClientMockRecorder) GetLatestSchemaMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSchemaMetadata", reflect.TypeOf((*MockClient)(nil).GetLatestSchemaMetadata), arg0)
}

// GetLatestWithMetadata mocks base method.
func (m *MockClient) GetLatestWithMetadata(arg0 string, arg1 map[string]string, arg2 bool) (schemaregistry.SchemaMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestWithMetadata", arg0, arg1, arg2)
	ret0, _ := ret[0].(schemaregistry.SchemaMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestWithMetadata indicates an expected call of GetLatestWithMetadata.
func (mr *MockClientMockRecorder) GetLatestWithMetadata(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestWithMetadata", reflect.TypeOf((*MockClient)(nil).GetLatestWithMetadata), arg0, arg1, arg2)
}

// GetSchemaMetadata mocks base method.
func (m *MockClient) GetSchemaMetadata(arg0 string, arg1 int) (schemaregistry.SchemaMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaMetadata", arg0, arg1)
	ret0, _ := ret[0].(schemaregistry.SchemaMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaMetadata indicates an expected call of GetSchemaMetadata.
func (mr *MockClientMockRecorder) GetSchemaMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaMetadata", reflect.TypeOf((*MockClient)(nil).GetSchemaMetadata), arg0, arg1)
}

// GetSchemaMetadataIncludeDeleted mocks base method.
func (m *MockClient) GetSchemaMetadataIncludeDeleted(arg0 string, arg1 int, arg2 bool) (schemaregistry.SchemaMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaMetadataIncludeDeleted", arg0, arg1, arg2)
	ret0, _ := ret[0].(schemaregistry.SchemaMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaMetadataIncludeDeleted indicates an expected call of GetSchemaMetadataIncludeDeleted.
func (mr *MockClientMockRecorder) GetSchemaMetadataIncludeDeleted(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaMetadataIncludeDeleted", reflect.TypeOf((*MockClient)(nil).GetSchemaMetadataIncludeDeleted), arg0, arg1, arg2)
}

// GetSubjectsAndVersionsByID mocks base method.
func (m *MockClient) GetSubjectsAndVersionsByID(arg0 int) ([]schemaregistry.SubjectAndVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubjectsAndVersionsByID", arg0)
	ret0, _ := ret[0].([]schemaregistry.SubjectAndVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubjectsAndVersionsByID indicates an expected call of GetSubjectsAndVersionsByID.
func (mr *MockClientMockRecorder) GetSubjectsAndVersionsByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjectsAndVersionsByID", reflect.TypeOf((*MockClient)(nil).GetSubjectsAndVersionsByID), arg0)
}

// GetVersion mocks base method.
func (m *MockClient) GetVersion(arg0 string, arg1 schemaregistry.SchemaInfo, arg2 bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockClientMockRecorder) GetVersion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockClient)(nil).GetVersion), arg0, arg1, arg2)
}

// GetVersionIncludeDeleted mocks base method.
func (m *MockClient) GetVersionIncludeDeleted(arg0 string, arg1 schemaregistry.SchemaInfo, arg2, arg3 bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionIncludeDeleted", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersionIncludeDeleted indicates an expected call of GetVersionIncludeDeleted.
func (mr *MockClientMockRecorder) GetVersionIncludeDeleted(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionIncludeDeleted", reflect.TypeOf((*MockClient)(nil).GetVersionIncludeDeleted), arg0, arg1, arg2, arg3)
}

// Register mocks base method.
func (m *MockClient) Register(arg0 string, arg1 schemaregistry.SchemaInfo, arg2 bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockClientMockRecorder) Register(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockClient)(nil).Register), arg0, arg1, arg2)
}

// RegisterFullResponse mocks base method.
func (m *MockClient) RegisterFullResponse(arg0 string, arg1 schemaregistry.SchemaInfo, arg2 bool) (schemaregistry.SchemaMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterFullResponse", arg0, arg1, arg2)
	ret0, _ := ret[0].(schemaregistry.SchemaMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterFullResponse indicates an expected call of RegisterFullResponse.
func (mr *MockClientMockRecorder) RegisterFullResponse(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterFullResponse", reflect.TypeOf((*MockClient)(nil).RegisterFullResponse), arg0, arg1, arg2)
}

// TestCompatibility mocks base method.
func (m *MockClient) TestCompatibility(arg0 string, arg1 int, arg2 schemaregistry.SchemaInfo) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestCompatibility", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestCompatibility indicates an expected call of TestCompatibility.
func (mr *MockClientMockRecorder) TestCompatibility(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestCompatibility", reflect.TypeOf((*MockClient)(nil).TestCompatibility), arg0, arg1, arg2)
}

// TestSubjectCompatibility mocks base method.
func (m *MockClient) TestSubjectCompatibility(arg0 string, arg1 schemaregistry.SchemaInfo) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestSubjectCompatibility", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestSubjectCompatibility indicates an expected call of TestSubjectCompatibility.
func (mr *MockClientMockRecorder) TestSubjectCompatibility(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestSubjectCompatibility", reflect.TypeOf((*MockClient)(nil).TestSubjectCompatibility), arg0, arg1)
}

// UpdateCompatibility mocks base method.
func (m *MockClient) UpdateCompatibility(arg0 string, arg1 schemaregistry.Compatibility) (schemaregistry.Compatibility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompatibility", arg0, arg1)
	ret0, _ := ret[0].(schemaregistry.Compatibility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCompatibility indicates an expected call of UpdateCompatibility.
func (mr *MockClientMockRecorder) UpdateCompatibility(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompatibility", reflect.TypeOf((*MockClient)(nil).UpdateCompatibility), arg0, arg1)
}

// UpdateConfig mocks base method.
func (m *MockClient) UpdateConfig(arg0 string, arg1 schemaregistry.ServerConfig) (schemaregistry.ServerConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfig", arg0, arg1)
	ret0, _ := ret[0].(schemaregistry.ServerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfig indicates an expected call of UpdateConfig.
func (mr *MockClientMockRecorder) UpdateConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockClient)(nil).UpdateConfig), arg0, arg1)
}

// UpdateDefaultCompatibility mocks base method.
func (m *MockClient) UpdateDefaultCompatibility(arg0 schemaregistry.Compatibility) (schemaregistry.Compatibility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDefaultCompatibility", arg0)
	ret0, _ := ret[0].(schemaregistry.Compatibility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDefaultCompatibility indicates an expected call of UpdateDefaultCompatibility.
func (mr *MockClientMockRecorder) UpdateDefaultCompatibility(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDefaultCompatibility", reflect.TypeOf((*MockClient)(nil).UpdateDefaultCompatibility), arg0)
}

// UpdateDefaultConfig mocks base method.
func (m *MockClient) UpdateDefaultConfig(arg0 schemaregistry.ServerConfig) (schemaregistry.ServerConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDefaultConfig", arg0)
	ret0, _ := ret[0].(schemaregistry.ServerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDefaultConfig indicates an expected call of UpdateDefaultConfig.
func (mr *MockClientMockRecorder) UpdateDefaultConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDefaultConfig", reflect.TypeOf((*MockClient)(nil).UpdateDefaultConfig), arg0)
}
