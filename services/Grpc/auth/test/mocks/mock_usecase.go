// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pbgen "github.com/sony-nurdianto/farm/auth/internal/pbgen"
)

// MockServiceUsecase is a mock of ServiceUsecase interface.
type MockServiceUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockServiceUsecaseMockRecorder
}

// MockServiceUsecaseMockRecorder is the mock recorder for MockServiceUsecase.
type MockServiceUsecaseMockRecorder struct {
	mock *MockServiceUsecase
}

// NewMockServiceUsecase creates a new mock instance.
func NewMockServiceUsecase(ctrl *gomock.Controller) *MockServiceUsecase {
	mock := &MockServiceUsecase{ctrl: ctrl}
	mock.recorder = &MockServiceUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceUsecase) EXPECT() *MockServiceUsecaseMockRecorder {
	return m.recorder
}

// TokenValidate mocks base method.
func (m *MockServiceUsecase) TokenValidate(req *pbgen.TokenValidateRequest) (*pbgen.TokenValidateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenValidate", req)
	ret0, _ := ret[0].(*pbgen.TokenValidateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenValidate indicates an expected call of TokenValidate.
func (mr *MockServiceUsecaseMockRecorder) TokenValidate(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenValidate", reflect.TypeOf((*MockServiceUsecase)(nil).TokenValidate), req)
}

// UserRegister mocks base method.
func (m *MockServiceUsecase) UserRegister(user *pbgen.RegisterUserRequest) (*pbgen.RegisterUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRegister", user)
	ret0, _ := ret[0].(*pbgen.RegisterUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRegister indicates an expected call of UserRegister.
func (mr *MockServiceUsecaseMockRecorder) UserRegister(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegister", reflect.TypeOf((*MockServiceUsecase)(nil).UserRegister), user)
}

// UserSignIn mocks base method.
func (m *MockServiceUsecase) UserSignIn(req *pbgen.AuthenticateUserRequest) (*pbgen.AuthenticateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignIn", req)
	ret0, _ := ret[0].(*pbgen.AuthenticateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignIn indicates an expected call of UserSignIn.
func (mr *MockServiceUsecaseMockRecorder) UserSignIn(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignIn", reflect.TypeOf((*MockServiceUsecase)(nil).UserSignIn), req)
}
