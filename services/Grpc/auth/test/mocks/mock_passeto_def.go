// Code generated by MockGen. DO NOT EDIT.
// Source: passeto_def.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPassetoToken is a mock of PassetoToken interface.
type MockPassetoToken struct {
	ctrl     *gomock.Controller
	recorder *MockPassetoTokenMockRecorder
}

// MockPassetoTokenMockRecorder is the mock recorder for MockPassetoToken.
type MockPassetoTokenMockRecorder struct {
	mock *MockPassetoToken
}

// NewMockPassetoToken creates a new mock instance.
func NewMockPassetoToken(ctrl *gomock.Controller) *MockPassetoToken {
	mock := &MockPassetoToken{ctrl: ctrl}
	mock.recorder = &MockPassetoTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPassetoToken) EXPECT() *MockPassetoTokenMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockPassetoToken) Decrypt(token string, key []byte, payload, footer any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", token, key, payload, footer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockPassetoTokenMockRecorder) Decrypt(token, key, payload, footer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockPassetoToken)(nil).Decrypt), token, key, payload, footer)
}

// Encrypt mocks base method.
func (m *MockPassetoToken) Encrypt(secretKey []byte, payload, footer any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", secretKey, payload, footer)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockPassetoTokenMockRecorder) Encrypt(secretKey, payload, footer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockPassetoToken)(nil).Encrypt), secretKey, payload, footer)
}
