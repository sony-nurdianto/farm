// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sony-nurdianto/farm/shared_lib/Go/kafkaev/avr (interfaces: AvrSerdeInstance,AvrSerializer,AvrDeserializer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	schemaregistry "github.com/confluentinc/confluent-kafka-go/v2/schemaregistry"
	avro "github.com/confluentinc/confluent-kafka-go/v2/schemaregistry/serde/avro"
	gomock "github.com/golang/mock/gomock"
	avr "github.com/sony-nurdianto/farm/shared_lib/Go/kafkaev/avr"
)

// MockAvrSerdeInstance is a mock of AvrSerdeInstance interface.
type MockAvrSerdeInstance struct {
	ctrl     *gomock.Controller
	recorder *MockAvrSerdeInstanceMockRecorder
}

// MockAvrSerdeInstanceMockRecorder is the mock recorder for MockAvrSerdeInstance.
type MockAvrSerdeInstanceMockRecorder struct {
	mock *MockAvrSerdeInstance
}

// NewMockAvrSerdeInstance creates a new mock instance.
func NewMockAvrSerdeInstance(ctrl *gomock.Controller) *MockAvrSerdeInstance {
	mock := &MockAvrSerdeInstance{ctrl: ctrl}
	mock.recorder = &MockAvrSerdeInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvrSerdeInstance) EXPECT() *MockAvrSerdeInstanceMockRecorder {
	return m.recorder
}

// NewGenericDeserializer mocks base method.
func (m *MockAvrSerdeInstance) NewGenericDeserializer(arg0 schemaregistry.Client, arg1 int, arg2 *avro.DeserializerConfig) (avr.AvrDeserializer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGenericDeserializer", arg0, arg1, arg2)
	ret0, _ := ret[0].(avr.AvrDeserializer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewGenericDeserializer indicates an expected call of NewGenericDeserializer.
func (mr *MockAvrSerdeInstanceMockRecorder) NewGenericDeserializer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGenericDeserializer", reflect.TypeOf((*MockAvrSerdeInstance)(nil).NewGenericDeserializer), arg0, arg1, arg2)
}

// NewGenericSerializer mocks base method.
func (m *MockAvrSerdeInstance) NewGenericSerializer(arg0 schemaregistry.Client, arg1 int, arg2 *avr.SerializerConfig) (avr.AvrSerializer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGenericSerializer", arg0, arg1, arg2)
	ret0, _ := ret[0].(avr.AvrSerializer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewGenericSerializer indicates an expected call of NewGenericSerializer.
func (mr *MockAvrSerdeInstanceMockRecorder) NewGenericSerializer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGenericSerializer", reflect.TypeOf((*MockAvrSerdeInstance)(nil).NewGenericSerializer), arg0, arg1, arg2)
}

// MockAvrSerializer is a mock of AvrSerializer interface.
type MockAvrSerializer struct {
	ctrl     *gomock.Controller
	recorder *MockAvrSerializerMockRecorder
}

// MockAvrSerializerMockRecorder is the mock recorder for MockAvrSerializer.
type MockAvrSerializerMockRecorder struct {
	mock *MockAvrSerializer
}

// NewMockAvrSerializer creates a new mock instance.
func NewMockAvrSerializer(ctrl *gomock.Controller) *MockAvrSerializer {
	mock := &MockAvrSerializer{ctrl: ctrl}
	mock.recorder = &MockAvrSerializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvrSerializer) EXPECT() *MockAvrSerializerMockRecorder {
	return m.recorder
}

// Serialize mocks base method.
func (m *MockAvrSerializer) Serialize(arg0 string, arg1 interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serialize", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Serialize indicates an expected call of Serialize.
func (mr *MockAvrSerializerMockRecorder) Serialize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serialize", reflect.TypeOf((*MockAvrSerializer)(nil).Serialize), arg0, arg1)
}

// MockAvrDeserializer is a mock of AvrDeserializer interface.
type MockAvrDeserializer struct {
	ctrl     *gomock.Controller
	recorder *MockAvrDeserializerMockRecorder
}

// MockAvrDeserializerMockRecorder is the mock recorder for MockAvrDeserializer.
type MockAvrDeserializerMockRecorder struct {
	mock *MockAvrDeserializer
}

// NewMockAvrDeserializer creates a new mock instance.
func NewMockAvrDeserializer(ctrl *gomock.Controller) *MockAvrDeserializer {
	mock := &MockAvrDeserializer{ctrl: ctrl}
	mock.recorder = &MockAvrDeserializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvrDeserializer) EXPECT() *MockAvrDeserializerMockRecorder {
	return m.recorder
}

// DeserializeInto mocks base method.
func (m *MockAvrDeserializer) DeserializeInto(arg0 string, arg1 []byte, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeserializeInto", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeserializeInto indicates an expected call of DeserializeInto.
func (mr *MockAvrDeserializerMockRecorder) DeserializeInto(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeserializeInto", reflect.TypeOf((*MockAvrDeserializer)(nil).DeserializeInto), arg0, arg1, arg2)
}
