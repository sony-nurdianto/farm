// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sony-nurdianto/farm/shared_lib/Go/database/postgres/pkg (interfaces: PostgresInstance,PostgresDatabase,Stmt)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	pkg "github.com/sony-nurdianto/farm/shared_lib/Go/database/postgres/pkg"
)

// MockPostgresInstance is a mock of PostgresInstance interface.
type MockPostgresInstance struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresInstanceMockRecorder
}

// MockPostgresInstanceMockRecorder is the mock recorder for MockPostgresInstance.
type MockPostgresInstanceMockRecorder struct {
	mock *MockPostgresInstance
}

// NewMockPostgresInstance creates a new mock instance.
func NewMockPostgresInstance(ctrl *gomock.Controller) *MockPostgresInstance {
	mock := &MockPostgresInstance{ctrl: ctrl}
	mock.recorder = &MockPostgresInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresInstance) EXPECT() *MockPostgresInstanceMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockPostgresInstance) Open(arg0, arg1 string) (pkg.PostgresDatabase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(pkg.PostgresDatabase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockPostgresInstanceMockRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockPostgresInstance)(nil).Open), arg0, arg1)
}

// MockPostgresDatabase is a mock of PostgresDatabase interface.
type MockPostgresDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresDatabaseMockRecorder
}

// MockPostgresDatabaseMockRecorder is the mock recorder for MockPostgresDatabase.
type MockPostgresDatabaseMockRecorder struct {
	mock *MockPostgresDatabase
}

// NewMockPostgresDatabase creates a new mock instance.
func NewMockPostgresDatabase(ctrl *gomock.Controller) *MockPostgresDatabase {
	mock := &MockPostgresDatabase{ctrl: ctrl}
	mock.recorder = &MockPostgresDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresDatabase) EXPECT() *MockPostgresDatabaseMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPostgresDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPostgresDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPostgresDatabase)(nil).Close))
}

// PingContext mocks base method.
func (m *MockPostgresDatabase) PingContext(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockPostgresDatabaseMockRecorder) PingContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockPostgresDatabase)(nil).PingContext), arg0)
}

// Prepare mocks base method.
func (m *MockPostgresDatabase) Prepare(arg0 string) (pkg.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", arg0)
	ret0, _ := ret[0].(pkg.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockPostgresDatabaseMockRecorder) Prepare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockPostgresDatabase)(nil).Prepare), arg0)
}

// SetConnMaxLifetime mocks base method.
func (m *MockPostgresDatabase) SetConnMaxLifetime(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConnMaxLifetime", arg0)
}

// SetConnMaxLifetime indicates an expected call of SetConnMaxLifetime.
func (mr *MockPostgresDatabaseMockRecorder) SetConnMaxLifetime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnMaxLifetime", reflect.TypeOf((*MockPostgresDatabase)(nil).SetConnMaxLifetime), arg0)
}

// SetMaxIdleConns mocks base method.
func (m *MockPostgresDatabase) SetMaxIdleConns(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxIdleConns", arg0)
}

// SetMaxIdleConns indicates an expected call of SetMaxIdleConns.
func (mr *MockPostgresDatabaseMockRecorder) SetMaxIdleConns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxIdleConns", reflect.TypeOf((*MockPostgresDatabase)(nil).SetMaxIdleConns), arg0)
}

// SetMaxOpenConns mocks base method.
func (m *MockPostgresDatabase) SetMaxOpenConns(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxOpenConns", arg0)
}

// SetMaxOpenConns indicates an expected call of SetMaxOpenConns.
func (mr *MockPostgresDatabaseMockRecorder) SetMaxOpenConns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxOpenConns", reflect.TypeOf((*MockPostgresDatabase)(nil).SetMaxOpenConns), arg0)
}

// MockStmt is a mock of Stmt interface.
type MockStmt struct {
	ctrl     *gomock.Controller
	recorder *MockStmtMockRecorder
}

// MockStmtMockRecorder is the mock recorder for MockStmt.
type MockStmtMockRecorder struct {
	mock *MockStmt
}

// NewMockStmt creates a new mock instance.
func NewMockStmt(ctrl *gomock.Controller) *MockStmt {
	mock := &MockStmt{ctrl: ctrl}
	mock.recorder = &MockStmtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStmt) EXPECT() *MockStmtMockRecorder {
	return m.recorder
}

// QueryContext mocks base method.
func (m *MockStmt) QueryContext(arg0 context.Context, arg1 ...interface{}) (pkg.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(pkg.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockStmtMockRecorder) QueryContext(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockStmt)(nil).QueryContext), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockStmt) QueryRowContext(arg0 context.Context, arg1 ...interface{}) pkg.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(pkg.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockStmtMockRecorder) QueryRowContext(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockStmt)(nil).QueryRowContext), varargs...)
}
