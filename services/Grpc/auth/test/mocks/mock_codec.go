// Code generated by MockGen. DO NOT EDIT.
// Source: base64.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBase64Encoder is a mock of Base64Encoder interface.
type MockBase64Encoder struct {
	ctrl     *gomock.Controller
	recorder *MockBase64EncoderMockRecorder
}

// MockBase64EncoderMockRecorder is the mock recorder for MockBase64Encoder.
type MockBase64EncoderMockRecorder struct {
	mock *MockBase64Encoder
}

// NewMockBase64Encoder creates a new mock instance.
func NewMockBase64Encoder(ctrl *gomock.Controller) *MockBase64Encoder {
	mock := &MockBase64Encoder{ctrl: ctrl}
	mock.recorder = &MockBase64EncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBase64Encoder) EXPECT() *MockBase64EncoderMockRecorder {
	return m.recorder
}

// DecodeString mocks base method.
func (m *MockBase64Encoder) DecodeString(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeString", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeString indicates an expected call of DecodeString.
func (mr *MockBase64EncoderMockRecorder) DecodeString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeString", reflect.TypeOf((*MockBase64Encoder)(nil).DecodeString), arg0)
}

// EncodeToString mocks base method.
func (m *MockBase64Encoder) EncodeToString(src []byte) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeToString", src)
	ret0, _ := ret[0].(string)
	return ret0
}

// EncodeToString indicates an expected call of EncodeToString.
func (mr *MockBase64EncoderMockRecorder) EncodeToString(src interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeToString", reflect.TypeOf((*MockBase64Encoder)(nil).EncodeToString), src)
}
