// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: farm/v1/farm.proto

package pbgen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FarmService_CreateFarm_FullMethodName  = "/farm.v1.FarmService/CreateFarm"
	FarmService_GetFarmByID_FullMethodName = "/farm.v1.FarmService/GetFarmByID"
	FarmService_GetFarmList_FullMethodName = "/farm.v1.FarmService/GetFarmList"
	FarmService_UpdateFarms_FullMethodName = "/farm.v1.FarmService/UpdateFarms"
	FarmService_DeleteFarm_FullMethodName  = "/farm.v1.FarmService/DeleteFarm"
)

// FarmServiceClient is the client API for FarmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FarmServiceClient interface {
	CreateFarm(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CreateFarmRequest, CreateFarmResponse], error)
	GetFarmByID(ctx context.Context, in *GetFarmByIDRequest, opts ...grpc.CallOption) (*GetFarmByIDResponse, error)
	GetFarmList(ctx context.Context, in *GetFarmListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFarmListResponse], error)
	UpdateFarms(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UpdateFarmsRequest, UpdateFarmsResponse], error)
	DeleteFarm(ctx context.Context, in *DeleteFarmRequest, opts ...grpc.CallOption) (*DeleteFarmResponse, error)
}

type farmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFarmServiceClient(cc grpc.ClientConnInterface) FarmServiceClient {
	return &farmServiceClient{cc}
}

func (c *farmServiceClient) CreateFarm(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CreateFarmRequest, CreateFarmResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FarmService_ServiceDesc.Streams[0], FarmService_CreateFarm_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateFarmRequest, CreateFarmResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FarmService_CreateFarmClient = grpc.BidiStreamingClient[CreateFarmRequest, CreateFarmResponse]

func (c *farmServiceClient) GetFarmByID(ctx context.Context, in *GetFarmByIDRequest, opts ...grpc.CallOption) (*GetFarmByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFarmByIDResponse)
	err := c.cc.Invoke(ctx, FarmService_GetFarmByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServiceClient) GetFarmList(ctx context.Context, in *GetFarmListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFarmListResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FarmService_ServiceDesc.Streams[1], FarmService_GetFarmList_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetFarmListRequest, GetFarmListResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FarmService_GetFarmListClient = grpc.ServerStreamingClient[GetFarmListResponse]

func (c *farmServiceClient) UpdateFarms(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UpdateFarmsRequest, UpdateFarmsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FarmService_ServiceDesc.Streams[2], FarmService_UpdateFarms_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpdateFarmsRequest, UpdateFarmsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FarmService_UpdateFarmsClient = grpc.BidiStreamingClient[UpdateFarmsRequest, UpdateFarmsResponse]

func (c *farmServiceClient) DeleteFarm(ctx context.Context, in *DeleteFarmRequest, opts ...grpc.CallOption) (*DeleteFarmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFarmResponse)
	err := c.cc.Invoke(ctx, FarmService_DeleteFarm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FarmServiceServer is the server API for FarmService service.
// All implementations must embed UnimplementedFarmServiceServer
// for forward compatibility.
type FarmServiceServer interface {
	CreateFarm(grpc.BidiStreamingServer[CreateFarmRequest, CreateFarmResponse]) error
	GetFarmByID(context.Context, *GetFarmByIDRequest) (*GetFarmByIDResponse, error)
	GetFarmList(*GetFarmListRequest, grpc.ServerStreamingServer[GetFarmListResponse]) error
	UpdateFarms(grpc.BidiStreamingServer[UpdateFarmsRequest, UpdateFarmsResponse]) error
	DeleteFarm(context.Context, *DeleteFarmRequest) (*DeleteFarmResponse, error)
	mustEmbedUnimplementedFarmServiceServer()
}

// UnimplementedFarmServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFarmServiceServer struct{}

func (UnimplementedFarmServiceServer) CreateFarm(grpc.BidiStreamingServer[CreateFarmRequest, CreateFarmResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CreateFarm not implemented")
}
func (UnimplementedFarmServiceServer) GetFarmByID(context.Context, *GetFarmByIDRequest) (*GetFarmByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFarmByID not implemented")
}
func (UnimplementedFarmServiceServer) GetFarmList(*GetFarmListRequest, grpc.ServerStreamingServer[GetFarmListResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetFarmList not implemented")
}
func (UnimplementedFarmServiceServer) UpdateFarms(grpc.BidiStreamingServer[UpdateFarmsRequest, UpdateFarmsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateFarms not implemented")
}
func (UnimplementedFarmServiceServer) DeleteFarm(context.Context, *DeleteFarmRequest) (*DeleteFarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFarm not implemented")
}
func (UnimplementedFarmServiceServer) mustEmbedUnimplementedFarmServiceServer() {}
func (UnimplementedFarmServiceServer) testEmbeddedByValue()                     {}

// UnsafeFarmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FarmServiceServer will
// result in compilation errors.
type UnsafeFarmServiceServer interface {
	mustEmbedUnimplementedFarmServiceServer()
}

func RegisterFarmServiceServer(s grpc.ServiceRegistrar, srv FarmServiceServer) {
	// If the following call pancis, it indicates UnimplementedFarmServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FarmService_ServiceDesc, srv)
}

func _FarmService_CreateFarm_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FarmServiceServer).CreateFarm(&grpc.GenericServerStream[CreateFarmRequest, CreateFarmResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FarmService_CreateFarmServer = grpc.BidiStreamingServer[CreateFarmRequest, CreateFarmResponse]

func _FarmService_GetFarmByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFarmByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServiceServer).GetFarmByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FarmService_GetFarmByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServiceServer).GetFarmByID(ctx, req.(*GetFarmByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmService_GetFarmList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFarmListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FarmServiceServer).GetFarmList(m, &grpc.GenericServerStream[GetFarmListRequest, GetFarmListResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FarmService_GetFarmListServer = grpc.ServerStreamingServer[GetFarmListResponse]

func _FarmService_UpdateFarms_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FarmServiceServer).UpdateFarms(&grpc.GenericServerStream[UpdateFarmsRequest, UpdateFarmsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FarmService_UpdateFarmsServer = grpc.BidiStreamingServer[UpdateFarmsRequest, UpdateFarmsResponse]

func _FarmService_DeleteFarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServiceServer).DeleteFarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FarmService_DeleteFarm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServiceServer).DeleteFarm(ctx, req.(*DeleteFarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FarmService_ServiceDesc is the grpc.ServiceDesc for FarmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FarmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "farm.v1.FarmService",
	HandlerType: (*FarmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFarmByID",
			Handler:    _FarmService_GetFarmByID_Handler,
		},
		{
			MethodName: "DeleteFarm",
			Handler:    _FarmService_DeleteFarm_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateFarm",
			Handler:       _FarmService_CreateFarm_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFarmList",
			Handler:       _FarmService_GetFarmList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateFarms",
			Handler:       _FarmService_UpdateFarms_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "farm/v1/farm.proto",
}
