services: 
  postgres:
    image: postgres:17.4-bookworm
    restart: always
    ports:
      - 5000:5432
    container_name: "postgres"
    environment:
      POSTGRES_USER: sony
      POSTGRES_PASSWORD: secret 
      POSTGRES_DB: auth
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - farm_postgres:/var/lib/postgresql/data/pgdata
    command: postgres -c wal_level=logical -c max_replication_slots=10 -c max_wal_senders=10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sony -d auth"]  
      interval: 10s  
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    restart: always
    ports:
      - 9080:8080

  redis-farmer-master: 
    image: redis/redis-stack-server:7.2.0-v18
    container_name: redis-farmer-master
    ports:
      - 6379:6379
    command: ["redis-server", "/etc/redis/redis.conf"]
    volumes:
      - ./infra/database/redis/farmer/redis-master.conf:/etc/redis/redis.conf:z
      - ./infra/database/redis/farmer/farmer-acl.conf:/data/users.acl:z
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "ping"]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 5s


  redis-farmer-slave-1: 
    image: redis/redis-stack-server:7.2.0-v18
    container_name: redis-farmer-slave-1
    ports:
      - 6378:6379
    command: ["redis-server", "/etc/redis/redis.conf"]
    volumes:
      - ./infra/database/redis/farmer/redis-slave-1.conf:/etc/redis/redis.conf:z
      - ./infra/database/redis/farmer/farmer-acl.conf:/data/users.acl:z
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "ping"]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 5s

  sentinel-farmer:
    image: redis/redis-stack-server:7.2.0-v18
    container_name: sentinel-farmer
    command: ["redis-server", "/etc/redis/sentinel.conf", "--sentinel"]
    volumes:
      - ./infra/database/redis/farmer/sentinel.conf:/etc/redis/sentinel.conf:z
    ports:
      - 26379:26379
    depends_on:
      - redis-farmer-master
      - redis-farmer-slave-1
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 5s


  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: redis-insight
    ports:
      - 5540:5540
    depends_on:
      - redis-farmer-master

  kafka-controller-1:
    image: apache/kafka:latest
    container_name: kafka-controller-1
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  kafka-broker-1:
    image: apache/kafka:latest
    container_name: kafka-broker-1
    ports:
      - 29092:9092
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_LOG_DIRS: /kafka-logs
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-broker-1:19092,PLAINTEXT_HOST://localhost:29092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093
      KAFKA_NUM_RECOVERY_THREADS_PER_DATA_DIR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true  # Enable untuk Connect internal topics
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: true
      KAFKA_NUM_PARTITIONS: 6
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1  # FIXED: Karena hanya 1 broker
      KAFKA_MIN_INSYNC_REPLICAS: 1         # FIXED: Karena hanya 1 broker
      
      # Fix untuk internal topics
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      
      KAFKA_LOG_SEGMENT_BYTES: 67108864    # 64 MB
      KAFKA_LOG_RETENTION_BYTES: 268435456 # 256 MB
    volumes:
      - kafka_logs:/kafka-logs:z
    depends_on:
      - kafka-controller-1

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.15
    container_name: schema-registry
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry  # FIXED: Match container name
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-broker-1:19092'  # FIXED: Correct port
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
      SCHEMA_REGISTRY_DEBUG: 'true'
      SCHEMA_REGISTRY_AVRO_COMPATIBILITY_LEVEL: backward
      SCHEMA_REGISTRY_SCHEMA_PROVIDERS: 'io.confluent.kafka.schemaregistry.avro.AvroSchemaProvider'
    depends_on:
      - kafka-broker-1

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.2.15
    container_name: kafka-connect
    ports:
      - "8083:8083"
    environment:
      # FIXED: Correct bootstrap servers
      CONNECT_BOOTSTRAP_SERVERS: 'kafka-broker-1:19092'
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      
      # Internal topics
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      
      # FIXED: Replication factors sesuai dengan jumlah broker (1)
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      
      # Converters
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      
      # Internal converters untuk Connect metadata
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER_SCHEMAS_ENABLE: false
      CONNECT_INTERNAL_VALUE_CONVERTER_SCHEMAS_ENABLE: false
      
      # Plugin path
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      
      # Logging
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      
      # Heap settings
      KAFKA_HEAP_OPTS: "-Xms512m -Xmx512m"

    command:
        - bash
        - -c
        - |
          confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.8.4 && \
          confluent-hub install --no-prompt jcustenborder/kafka-connect-redis:latest && \
          /etc/confluent/docker/run
        
    volumes:
      - kafka_connect_data:/data
    depends_on:
      - kafka-broker-1
      - schema-registry
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/"]
      interval: 30s
      timeout: 10s
      retries: 3

  debezium-connect:
    image: debezium/connect:2.7.3.Final
    container_name: debezium-connect
    ports:
      - "8084:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka-broker-1:19092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_connect_configs
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_statuses
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      # KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      # VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMA_ENABLE: true
      VALUE_CONVERTER_SCHEMA_ENABLE: true
      KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_CONNECT_PLUGINS_DIR: /kafka/connect/
    volumes:
      - ./infra/debezium/confluentinc-kafka-connect-avro-converter-8.0.0/lib:/kafka/connect/libs:z
    depends_on:
      - kafka-broker-1
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/"]
      interval: 30s
      timeout: 10s
      retries: 3


  # Kafka UI Service
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    ports:
      - "8080:8080"
    environment:
      # Kafka cluster configuration
      KAFKA_CLUSTERS_0_NAME: cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-broker-1:19092
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: PLAINTEXT
      
      # Schema Registry integration
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      
      # Kafka Connect integration
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
      
      # Debeziym CDC integration
      KAFKA_CLUSTERS_0_KAFKACONNECT_1_NAME: debezium-connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_1_ADDRESS: http://debezium-connect:8083
      
      # UI Configuration
      AUTH_TYPE: "DISABLED"  # Disable authentication for development
      MANAGEMENT_HEALTH_LDAP_ENABLED: false
      
      # Logging
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_PROVECTUS: DEBUG
      
    depends_on:
      - kafka-broker-1
      - schema-registry
      - kafka-connect
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./infra/observability/config/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3  

  jaeger:
    image: jaegertracing/opentelemetry-all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686"   # Jaeger UI
      - "14268:14268"   # jaeger.thrift over HTTP
      - "14250:14250"   # jaeger.proto over gRPC
      - "6831:6831/udp" # jaeger.thrift over UDP (compact)
      - "6832:6832/udp" # jaeger.thrift over UDP (binary)
      - "5778:5778"     # serve configs
      - "9411:9411"     # Zipkin compatible endpoint
    environment:
      COLLECTOR_OTLP_ENABLED: true
      COLLECTOR_ZIPKIN_HOST_PORT: 9411
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./infra/observability/config/loki.yaml:/etc/loki/local-config.yaml:z
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3


  otel-collector:
    image: otel/opentelemetry-collector-contrib
    volumes:
      - ./infra/observability/config/otel-collector.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:13133/"]
      interval: 30s
      timeout: 10s
      retries: 3

  events-auth-farmer:
    build:
      context: .
      dockerfile: ./scripts/dockerfile/services/events/auth_farmer_ev_lis.dockerfile
    depends_on:
      redis-farmer-master:
        condition: service_healthy
      redis-farmer-slave-1:  
        condition: service_healthy
      sentinel-farmer:
        condition: service_healthy

# Service
  grpc-auth-service:
    build:
      context: .
      dockerfile: ./scripts/dockerfile/services/grpc/auth_service.dockerfile
    env_file:
      - ./services/Grpc/auth/.env
    depends_on:
      postgres:
        condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "grpc_health_probe", "-addr=:50051", "-service=auth-service"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
  
  rest-farm-gateway:
    build:
      context: .
      dockerfile: ./scripts/dockerfile/services/rest/farm_gateway.dockerfile
    env_file:
      - ./services/Rest/farm_gateway/.env
    ports:
      - 8000:3000
    depends_on:
      - grpc-auth-service

    healthcheck:
      test: ["CMD", "nc", "-z", "rest-farm-gateway", "3000"]
      interval: 10s
      timeout: 5s
      retries: 5


volumes:
  farm_postgres:
  kafka_logs:
  kafka_connect_data:

