services: 
  postgres:
    image: postgres:17.4-bookworm
    restart: always
    ports:
      - 5000:5432
    container_name: "postgres"
    environment:
      POSTGRES_USER: sony
      POSTGRES_PASSWORD: secret 
      POSTGRES_DB: auth
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - farm_postgres:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sony -d auth"]  
      interval: 10s  
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    restart: always
    ports:
      - 9080:8080

  kafka-controller-1:
    image: apache/kafka:latest
    container_name: kafka-controller-1
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  kafka-broker-1:
    image: apache/kafka:latest
    container_name: kafka-broker-1
    ports:
      - 29092:9092
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_LOG_DIRS: /kafka-logs
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-broker-1:19092,PLAINTEXT_HOST://localhost:29092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093
      KAFKA_NUM_RECOVERY_THREADS_PER_DATA_DIR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true  # Enable untuk Connect internal topics
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: true
      KAFKA_NUM_PARTITIONS: 6
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1  # FIXED: Karena hanya 1 broker
      KAFKA_MIN_INSYNC_REPLICAS: 1         # FIXED: Karena hanya 1 broker
      
      # Fix untuk internal topics
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      
      KAFKA_LOG_SEGMENT_BYTES: 67108864    # 64 MB
      KAFKA_LOG_RETENTION_BYTES: 268435456 # 256 MB
    volumes:
      - kafka_logs:/kafka-logs:z
    depends_on:
      - kafka-controller-1

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.15
    container_name: schema-registry
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry  # FIXED: Match container name
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-broker-1:19092'  # FIXED: Correct port
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
    depends_on:
      - kafka-broker-1

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.2.15
    container_name: kafka-connect
    ports:
      - "8083:8083"
    environment:
      # FIXED: Correct bootstrap servers
      CONNECT_BOOTSTRAP_SERVERS: 'kafka-broker-1:19092'
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      
      # Internal topics
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      
      # FIXED: Replication factors sesuai dengan jumlah broker (1)
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      
      # Converters
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      
      # Internal converters untuk Connect metadata
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER_SCHEMAS_ENABLE: false
      CONNECT_INTERNAL_VALUE_CONVERTER_SCHEMAS_ENABLE: false
      
      # Plugin path
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      
      # Logging
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      
      # Heap settings
      KAFKA_HEAP_OPTS: "-Xms512m -Xmx512m"

    command:
        - bash
        - -c
        - |
          confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.8.4 && \
          /etc/confluent/docker/run
        
    volumes:
      - kafka_connect_data:/data
    depends_on:
      - kafka-broker-1
      - schema-registry
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI Service
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    ports:
      - "8080:8080"
    environment:
      # Kafka cluster configuration
      KAFKA_CLUSTERS_0_NAME: cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-broker-1:19092
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: PLAINTEXT
      
      # Schema Registry integration
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      
      # Kafka Connect integration
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
      
      # UI Configuration
      AUTH_TYPE: "DISABLED"  # Disable authentication for development
      MANAGEMENT_HEALTH_LDAP_ENABLED: false
      
      # Logging
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_PROVECTUS: DEBUG
      
    depends_on:
      - kafka-broker-1
      - schema-registry
      - kafka-connect
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.enable-remote-write-receiver'
    ports:
      - "9090:9090"
    volumes:
      - ./infra/observability/config/prometheus.yaml:/etc/prometheus/prometheus.yml:z
      - prometheus_data:/prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    ports:
      - "3200:3200"   # tempo UI
      - "9095:9095"   # tempo gRPC internal
      - "14317:4317"  # OTLP gRPC
      - "14318:4318"  # OTLP HTTP
      - "9412:9411"   # Zipkin
    volumes:
      - ./infra/observability/config/tempo.yaml:/etc/tempo.yaml:z
      - tempo_data:/var/tempo
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3200/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  jaeger-all-in-one:
    image: cr.jaegertracing.io/jaegertracing/jaeger:2.9.0
    container_name: jaeger-all-in-one
    ports:
      - "16686:16686"   # Jaeger UI
      - "14268:14268"   # jaeger.thrift over HTTP
      - "14250:14250"   # jaeger.proto over gRPC
      - "6831:6831/udp" # jaeger.thrift over UDP (compact)
      - "6832:6832/udp" # jaeger.thrift over UDP (binary)
      - "5778:5778"     # serve configs
      - "9411:9411"     # Zipkin compatible endpoint
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: 9411
      COLLECTOR_OTLP_ENABLED: true
      LOG_LEVEL: debug
    volumes:
      - jaeger_data:/badger
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
      - ./infra/observability/config/loki.yaml:/etc/loki/local-config.yaml:z
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
      - "4317:4317"   # otlp grpc receiver
      - "4318:4318"   # otlp http receiver
      - "8889:8889"   # prometheus metrics
      - "13133:13133" # health check
      - "9464:9464"   # prometheus exporter
      - "8888:8888"   # metrics endpoint
    volumes:
      - ./infra/observability/config/otel-collector.yaml:/etc/otel-collector-config.yaml:z
    depends_on:
      - prometheus
      # - tempo
      - loki
      - jaeger-all-in-one
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:13133/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Observability Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_FEATURE_TOGGLES_ENABLE: traceqlEditor
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/observability/config/grafana/provisioning:/etc/grafana/provisioning:z
      - ./infra/observability/config/grafana/dashboards:/var/lib/grafana/dashboards:z
    depends_on:
      - prometheus
      # - tempo
      - loki
      - jaeger-all-in-one
      - otel-collector
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  grpc-auth-service:
    build:
      context: .
      dockerfile: ./scripts/dockerfile/services/grpc/auth_service.dockerfile
    env_file:
      - ./services/Grpc/auth/.env
    healthcheck:
      test: ["CMD", "nc", "-z", "grpc-auth-service", "50051"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy

  rest-farm-gateway:
    build:
      context: .
      dockerfile: ./scripts/dockerfile/services/rest/farm_gateway.dockerfile
    env_file:
      - ./services/Rest/farm_gateway/.env
    ports:
      - 8000:3000
    healthcheck:
      test: ["CMD", "nc", "-z", "rest-farm-gateway", "3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      grpc-auth-service:
        condition: service_healthy

volumes:
  farm_postgres:
  kafka_logs:
  kafka_connect_data:
  tempo_data:
  prometheus_data:
  grafana_data:
  loki_data:
  jaeger_data:

