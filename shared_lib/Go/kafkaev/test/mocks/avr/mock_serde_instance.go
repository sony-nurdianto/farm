//go:build !test
// +build !test

// Code generated by MockGen. DO NOT EDIT.
// Source: serde_instance_def.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	schemaregistry "github.com/confluentinc/confluent-kafka-go/v2/schemaregistry"
	serde "github.com/confluentinc/confluent-kafka-go/v2/schemaregistry/serde"
	avro "github.com/confluentinc/confluent-kafka-go/v2/schemaregistry/serde/avro"
	gomock "github.com/golang/mock/gomock"
	avr "github.com/sony-nurdianto/farm/shared_lib/Go/kafkaev/avr"
)

// MockAvrSerdeInstance is a mock of AvrSerdeInstance interface.
type MockAvrSerdeInstance struct {
	ctrl     *gomock.Controller
	recorder *MockAvrSerdeInstanceMockRecorder
}

// MockAvrSerdeInstanceMockRecorder is the mock recorder for MockAvrSerdeInstance.
type MockAvrSerdeInstanceMockRecorder struct {
	mock *MockAvrSerdeInstance
}

// NewMockAvrSerdeInstance creates a new mock instance.
func NewMockAvrSerdeInstance(ctrl *gomock.Controller) *MockAvrSerdeInstance {
	mock := &MockAvrSerdeInstance{ctrl: ctrl}
	mock.recorder = &MockAvrSerdeInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvrSerdeInstance) EXPECT() *MockAvrSerdeInstanceMockRecorder {
	return m.recorder
}

// NewGenericDeserializer mocks base method.
func (m *MockAvrSerdeInstance) NewGenericDeserializer(client schemaregistry.Client, serdeType serde.Type, conf *avro.DeserializerConfig) (avr.AvrDeserializer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGenericDeserializer", client, serdeType, conf)
	ret0, _ := ret[0].(avr.AvrDeserializer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewGenericDeserializer indicates an expected call of NewGenericDeserializer.
func (mr *MockAvrSerdeInstanceMockRecorder) NewGenericDeserializer(client, serdeType, conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGenericDeserializer", reflect.TypeOf((*MockAvrSerdeInstance)(nil).NewGenericDeserializer), client, serdeType, conf)
}

// NewGenericSerializer mocks base method.
func (m *MockAvrSerdeInstance) NewGenericSerializer(client schemaregistry.Client, serdeType serde.Type, conf *avro.SerializerConfig) (avr.AvrSerializer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGenericSerializer", client, serdeType, conf)
	ret0, _ := ret[0].(avr.AvrSerializer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewGenericSerializer indicates an expected call of NewGenericSerializer.
func (mr *MockAvrSerdeInstanceMockRecorder) NewGenericSerializer(client, serdeType, conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGenericSerializer", reflect.TypeOf((*MockAvrSerdeInstance)(nil).NewGenericSerializer), client, serdeType, conf)
}
