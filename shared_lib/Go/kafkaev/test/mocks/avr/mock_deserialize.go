// Code generated by MockGen. DO NOT EDIT.
// Source: deserializer_def.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAvrDeserializer is a mock of AvrDeserializer interface.
type MockAvrDeserializer struct {
	ctrl     *gomock.Controller
	recorder *MockAvrDeserializerMockRecorder
}

// MockAvrDeserializerMockRecorder is the mock recorder for MockAvrDeserializer.
type MockAvrDeserializerMockRecorder struct {
	mock *MockAvrDeserializer
}

// NewMockAvrDeserializer creates a new mock instance.
func NewMockAvrDeserializer(ctrl *gomock.Controller) *MockAvrDeserializer {
	mock := &MockAvrDeserializer{ctrl: ctrl}
	mock.recorder = &MockAvrDeserializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvrDeserializer) EXPECT() *MockAvrDeserializerMockRecorder {
	return m.recorder
}

// DeserializeInto mocks base method.
func (m *MockAvrDeserializer) DeserializeInto(topic string, payload []byte, msg any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeserializeInto", topic, payload, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeserializeInto indicates an expected call of DeserializeInto.
func (mr *MockAvrDeserializerMockRecorder) DeserializeInto(topic, payload, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeserializeInto", reflect.TypeOf((*MockAvrDeserializer)(nil).DeserializeInto), topic, payload, msg)
}
