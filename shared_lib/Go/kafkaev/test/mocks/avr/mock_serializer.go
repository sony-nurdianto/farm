//go:build !test
// +build !test

// Code generated by MockGen. DO NOT EDIT.
// Source: serializer_def.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAvrSerializer is a mock of AvrSerializer interface.
type MockAvrSerializer struct {
	ctrl     *gomock.Controller
	recorder *MockAvrSerializerMockRecorder
}

// MockAvrSerializerMockRecorder is the mock recorder for MockAvrSerializer.
type MockAvrSerializerMockRecorder struct {
	mock *MockAvrSerializer
}

// NewMockAvrSerializer creates a new mock instance.
func NewMockAvrSerializer(ctrl *gomock.Controller) *MockAvrSerializer {
	mock := &MockAvrSerializer{ctrl: ctrl}
	mock.recorder = &MockAvrSerializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvrSerializer) EXPECT() *MockAvrSerializerMockRecorder {
	return m.recorder
}

// Serialize mocks base method.
func (m *MockAvrSerializer) Serialize(topic string, msg any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serialize", topic, msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Serialize indicates an expected call of Serialize.
func (mr *MockAvrSerializerMockRecorder) Serialize(topic, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serialize", reflect.TypeOf((*MockAvrSerializer)(nil).Serialize), topic, msg)
}
