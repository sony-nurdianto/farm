//go:build !test
// +build !test

// Code generated by MockGen. DO NOT EDIT.
// Source: kafka_def.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	kafka "github.com/confluentinc/confluent-kafka-go/v2/kafka"
	gomock "github.com/golang/mock/gomock"
	kev "github.com/sony-nurdianto/farm/shared_lib/Go/kafkaev/kev"
)

// MockKafka is a mock of Kafka interface.
type MockKafka struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaMockRecorder
}

// MockKafkaMockRecorder is the mock recorder for MockKafka.
type MockKafkaMockRecorder struct {
	mock *MockKafka
}

// NewMockKafka creates a new mock instance.
func NewMockKafka(ctrl *gomock.Controller) *MockKafka {
	mock := &MockKafka{ctrl: ctrl}
	mock.recorder = &MockKafkaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafka) EXPECT() *MockKafkaMockRecorder {
	return m.recorder
}

// NewProducer mocks base method.
func (m *MockKafka) NewProducer(conf *kafka.ConfigMap) (kev.KevProducer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewProducer", conf)
	ret0, _ := ret[0].(kev.KevProducer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewProducer indicates an expected call of NewProducer.
func (mr *MockKafkaMockRecorder) NewProducer(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProducer", reflect.TypeOf((*MockKafka)(nil).NewProducer), conf)
}
