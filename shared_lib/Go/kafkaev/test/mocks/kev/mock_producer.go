//go:build !test
// +build !test

// Code generated by MockGen. DO NOT EDIT.
// Source: producer_def.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	kafka "github.com/confluentinc/confluent-kafka-go/v2/kafka"
	gomock "github.com/golang/mock/gomock"
)

// MockKevProducer is a mock of KevProducer interface.
type MockKevProducer struct {
	ctrl     *gomock.Controller
	recorder *MockKevProducerMockRecorder
}

// MockKevProducerMockRecorder is the mock recorder for MockKevProducer.
type MockKevProducerMockRecorder struct {
	mock *MockKevProducer
}

// NewMockKevProducer creates a new mock instance.
func NewMockKevProducer(ctrl *gomock.Controller) *MockKevProducer {
	mock := &MockKevProducer{ctrl: ctrl}
	mock.recorder = &MockKevProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKevProducer) EXPECT() *MockKevProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKevProducer) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockKevProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKevProducer)(nil).Close))
}

// Events mocks base method.
func (m *MockKevProducer) Events() chan kafka.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events")
	ret0, _ := ret[0].(chan kafka.Event)
	return ret0
}

// Events indicates an expected call of Events.
func (mr *MockKevProducerMockRecorder) Events() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockKevProducer)(nil).Events))
}

// Flush mocks base method.
func (m *MockKevProducer) Flush(timeoutMs int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", timeoutMs)
	ret0, _ := ret[0].(int)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockKevProducerMockRecorder) Flush(timeoutMs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockKevProducer)(nil).Flush), timeoutMs)
}

// KafkaProducer mocks base method.
func (m *MockKevProducer) KafkaProducer() *kafka.Producer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KafkaProducer")
	ret0, _ := ret[0].(*kafka.Producer)
	return ret0
}

// KafkaProducer indicates an expected call of KafkaProducer.
func (mr *MockKevProducerMockRecorder) KafkaProducer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KafkaProducer", reflect.TypeOf((*MockKevProducer)(nil).KafkaProducer))
}

// Produce mocks base method.
func (m *MockKevProducer) Produce(msg *kafka.Message, deliveryChan chan kafka.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", msg, deliveryChan)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockKevProducerMockRecorder) Produce(msg, deliveryChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockKevProducer)(nil).Produce), msg, deliveryChan)
}
