// Code generated by MockGen. DO NOT EDIT.
// Source: schemargs_instance_def.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	schemaregistry "github.com/confluentinc/confluent-kafka-go/v2/schemaregistry"
	gomock "github.com/golang/mock/gomock"
)

// MockSchemaRegisteryInstance is a mock of SchemaRegisteryInstance interface.
type MockSchemaRegisteryInstance struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaRegisteryInstanceMockRecorder
}

// MockSchemaRegisteryInstanceMockRecorder is the mock recorder for MockSchemaRegisteryInstance.
type MockSchemaRegisteryInstanceMockRecorder struct {
	mock *MockSchemaRegisteryInstance
}

// NewMockSchemaRegisteryInstance creates a new mock instance.
func NewMockSchemaRegisteryInstance(ctrl *gomock.Controller) *MockSchemaRegisteryInstance {
	mock := &MockSchemaRegisteryInstance{ctrl: ctrl}
	mock.recorder = &MockSchemaRegisteryInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemaRegisteryInstance) EXPECT() *MockSchemaRegisteryInstanceMockRecorder {
	return m.recorder
}

// NewClient mocks base method.
func (m *MockSchemaRegisteryInstance) NewClient(conf *schemaregistry.Config) (schemaregistry.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClient", conf)
	ret0, _ := ret[0].(schemaregistry.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClient indicates an expected call of NewClient.
func (mr *MockSchemaRegisteryInstanceMockRecorder) NewClient(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockSchemaRegisteryInstance)(nil).NewClient), conf)
}
