//go:build !test
// +build !test

// Code generated by MockGen. DO NOT EDIT.
// Source: schemargs_client_def.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	schemaregistry "github.com/confluentinc/confluent-kafka-go/v2/schemaregistry"
	gomock "github.com/golang/mock/gomock"
)

// MockSchemaRegisteryClient is a mock of SchemaRegisteryClient interface.
type MockSchemaRegisteryClient struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaRegisteryClientMockRecorder
}

// MockSchemaRegisteryClientMockRecorder is the mock recorder for MockSchemaRegisteryClient.
type MockSchemaRegisteryClientMockRecorder struct {
	mock *MockSchemaRegisteryClient
}

// NewMockSchemaRegisteryClient creates a new mock instance.
func NewMockSchemaRegisteryClient(ctrl *gomock.Controller) *MockSchemaRegisteryClient {
	mock := &MockSchemaRegisteryClient{ctrl: ctrl}
	mock.recorder = &MockSchemaRegisteryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemaRegisteryClient) EXPECT() *MockSchemaRegisteryClientMockRecorder {
	return m.recorder
}

// GetLatestSchemaMetadata mocks base method.
func (m *MockSchemaRegisteryClient) GetLatestSchemaMetadata(subject string) (schemaregistry.SchemaMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSchemaMetadata", subject)
	ret0, _ := ret[0].(schemaregistry.SchemaMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSchemaMetadata indicates an expected call of GetLatestSchemaMetadata.
func (mr *MockSchemaRegisteryClientMockRecorder) GetLatestSchemaMetadata(subject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSchemaMetadata", reflect.TypeOf((*MockSchemaRegisteryClient)(nil).GetLatestSchemaMetadata), subject)
}

// Register mocks base method.
func (m *MockSchemaRegisteryClient) Register(subject string, schema schemaregistry.SchemaInfo, normalize bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", subject, schema, normalize)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockSchemaRegisteryClientMockRecorder) Register(subject, schema, normalize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockSchemaRegisteryClient)(nil).Register), subject, schema, normalize)
}
