// Code generated by MockGen. DO NOT EDIT.
// Source: instance_def.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pkg "github.com/sony-nurdianto/farm/shared_lib/Go/database/postgres/pkg"
)

// MockPostgresInstance is a mock of PostgresInstance interface.
type MockPostgresInstance struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresInstanceMockRecorder
}

// MockPostgresInstanceMockRecorder is the mock recorder for MockPostgresInstance.
type MockPostgresInstanceMockRecorder struct {
	mock *MockPostgresInstance
}

// NewMockPostgresInstance creates a new mock instance.
func NewMockPostgresInstance(ctrl *gomock.Controller) *MockPostgresInstance {
	mock := &MockPostgresInstance{ctrl: ctrl}
	mock.recorder = &MockPostgresInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresInstance) EXPECT() *MockPostgresInstanceMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockPostgresInstance) Open(driverName, dataSourceName string) (pkg.PostgresDatabase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", driverName, dataSourceName)
	ret0, _ := ret[0].(pkg.PostgresDatabase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockPostgresInstanceMockRecorder) Open(driverName, dataSourceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockPostgresInstance)(nil).Open), driverName, dataSourceName)
}
