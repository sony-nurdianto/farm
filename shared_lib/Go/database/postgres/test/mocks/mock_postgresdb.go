// Code generated by MockGen. DO NOT EDIT.
// Source: database_def.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	pkg "github.com/sony-nurdianto/farm/shared_lib/Go/database/postgres/pkg"
)

// MockPostgresDatabase is a mock of PostgresDatabase interface.
type MockPostgresDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresDatabaseMockRecorder
}

// MockPostgresDatabaseMockRecorder is the mock recorder for MockPostgresDatabase.
type MockPostgresDatabaseMockRecorder struct {
	mock *MockPostgresDatabase
}

// NewMockPostgresDatabase creates a new mock instance.
func NewMockPostgresDatabase(ctrl *gomock.Controller) *MockPostgresDatabase {
	mock := &MockPostgresDatabase{ctrl: ctrl}
	mock.recorder = &MockPostgresDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresDatabase) EXPECT() *MockPostgresDatabaseMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPostgresDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPostgresDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPostgresDatabase)(nil).Close))
}

// PingContext mocks base method.
func (m *MockPostgresDatabase) PingContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockPostgresDatabaseMockRecorder) PingContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockPostgresDatabase)(nil).PingContext), ctx)
}

// Prepare mocks base method.
func (m *MockPostgresDatabase) Prepare(query string) (pkg.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", query)
	ret0, _ := ret[0].(pkg.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockPostgresDatabaseMockRecorder) Prepare(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockPostgresDatabase)(nil).Prepare), query)
}

// SetConnMaxLifetime mocks base method.
func (m *MockPostgresDatabase) SetConnMaxLifetime(d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConnMaxLifetime", d)
}

// SetConnMaxLifetime indicates an expected call of SetConnMaxLifetime.
func (mr *MockPostgresDatabaseMockRecorder) SetConnMaxLifetime(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnMaxLifetime", reflect.TypeOf((*MockPostgresDatabase)(nil).SetConnMaxLifetime), d)
}

// SetMaxIdleConns mocks base method.
func (m *MockPostgresDatabase) SetMaxIdleConns(n int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxIdleConns", n)
}

// SetMaxIdleConns indicates an expected call of SetMaxIdleConns.
func (mr *MockPostgresDatabaseMockRecorder) SetMaxIdleConns(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxIdleConns", reflect.TypeOf((*MockPostgresDatabase)(nil).SetMaxIdleConns), n)
}

// SetMaxOpenConns mocks base method.
func (m *MockPostgresDatabase) SetMaxOpenConns(n int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxOpenConns", n)
}

// SetMaxOpenConns indicates an expected call of SetMaxOpenConns.
func (mr *MockPostgresDatabaseMockRecorder) SetMaxOpenConns(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxOpenConns", reflect.TypeOf((*MockPostgresDatabase)(nil).SetMaxOpenConns), n)
}
